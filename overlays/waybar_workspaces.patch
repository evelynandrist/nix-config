diff --git a/include/modules/hyprland/workspaces.hpp b/include/modules/hyprland/workspaces.hpp
index a9d56b79..84523712 100644
--- a/include/modules/hyprland/workspaces.hpp
+++ b/include/modules/hyprland/workspaces.hpp
@@ -76,6 +76,9 @@ class Workspaces : public AModule, public EventHandler {
   void onWorkspaceDestroyed(std::string const& payload);
   void onWorkspaceCreated(std::string const& workspaceName,
                           Json::Value const& clientsData = Json::Value::nullRef);
+  void onWorkspaceCreatedV2(std::string const& workspaceId,
+                            std::string const& workspaceName,
+                            Json::Value const& clientsData = Json::Value::nullRef);
   void onWorkspaceMoved(std::string const& payload);
   void onWorkspaceRenamed(std::string const& payload);
 
diff --git a/src/modules/hyprland/workspaces.cpp b/src/modules/hyprland/workspaces.cpp
index 13364f3f..6c3be39d 100644
--- a/src/modules/hyprland/workspaces.cpp
+++ b/src/modules/hyprland/workspaces.cpp
@@ -113,6 +113,7 @@ void Workspaces::createWorkspacesToCreate() {
     updateWindowCount();
     sortWorkspaces();
   }
+
   m_workspacesToCreate.clear();
 }
 
@@ -322,8 +323,10 @@ void Workspaces::onEvent(const std::string &ev) {
     onSpecialWorkspaceActivated(payload);
   } else if (eventName == "destroyworkspace") {
     onWorkspaceDestroyed(payload);
-  } else if (eventName == "createworkspace") {
-    onWorkspaceCreated(payload);
+  } else if (eventName == "createworkspacev2") {
+    std::string workspaceId(begin(payload), begin(payload) + payload.find_first_of(','));
+    std::string workspaceName = payload.substr(workspaceId.size() + 1);
+    onWorkspaceCreatedV2(workspaceId, workspaceName);
   } else if (eventName == "focusedmon") {
     onMonitorFocused(payload);
   } else if (eventName == "moveworkspace") {
@@ -393,6 +396,38 @@ void Workspaces::onWorkspaceCreated(std::string const &workspaceName,
   }
 }
 
+void Workspaces::onWorkspaceCreatedV2(std::string const &workspaceId,
+                                      std::string const &workspaceName,
+                                      Json::Value const &clientsData) {
+  spdlog::debug("Workspace created: {}", workspaceId);
+  auto const workspacesJson = gIPC->getSocket1JsonReply("workspaces");
+
+  if (!isWorkspaceIgnored(workspaceName)) {
+    auto const workspaceRules = gIPC->getSocket1JsonReply("workspacerules");
+    for (Json::Value workspaceJson : workspacesJson) {
+      std::string id = workspaceJson["id"].asString();
+      if (id == workspaceId) {
+        if ((allOutputs() || m_bar.output->name == workspaceJson["monitor"].asString()) &&
+            (showSpecial() || !workspaceName.starts_with("special")) && !isDoubleSpecial(workspaceName)) {
+          for (Json::Value const &rule : workspaceRules) {
+            if (rule["workspaceString"].asString() == workspaceName) {
+              workspaceJson["persistent-rule"] = rule["persistent"].asBool();
+              break;
+            }
+          }
+
+          m_workspacesToCreate.emplace_back(workspaceJson, clientsData);
+          break;
+        }
+      } else {
+        extendOrphans(workspaceJson["id"].asInt(), clientsData);
+      }
+    }
+  } else {
+    spdlog::trace("Not creating workspace because it is ignored: {}", workspaceName);
+  }
+}
+
 void Workspaces::onWorkspaceMoved(std::string const &payload) {
   spdlog::debug("Workspace moved: {}", payload);
 
@@ -662,7 +697,7 @@ void Workspaces::registerOrphanWindow(WindowCreationPayload create_window_payloa
 auto Workspaces::registerIpc() -> void {
   gIPC->registerForIPC("workspace", this);
   gIPC->registerForIPC("activespecial", this);
-  gIPC->registerForIPC("createworkspace", this);
+  gIPC->registerForIPC("createworkspacev2", this);
   gIPC->registerForIPC("destroyworkspace", this);
   gIPC->registerForIPC("focusedmon", this);
   gIPC->registerForIPC("moveworkspace", this);
